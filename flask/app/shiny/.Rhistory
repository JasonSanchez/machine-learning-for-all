shiny::runApp()
getwd()
df_train<-iris
runApp()
df_test<-mtcars
outcome.var<-"Species"
runApp()
install.packages("plotly")
install.packages("Plotly")
library(plotly)
source('test.R')
source('~/Google Drive/Code/R/EDA/miss.plot.R')
source('~/Google Drive/Code/R/EDA/corr.plot.R')
source('test.R')
runApp()
install.packages("devtools")
runApp()
devtools::install_github('hadley/ggplot2')
runApp()
shiny::runApp()
df_train<-iris
df_test<-mtcars
outcome.var<-"Species"
runApp()
library(shiny)
library(dplyr)
library(DT)
library(stargazer)
library(plotly)
source('test.R')
runApp()
runApp()
runApp()
runApp()
runApp()
table(iris$Species)
names(table(iris$Species))
?renderTable
runApp()
runApp()
data.frame(table(iris$Specieis))
data.frame(table(iris$Species))
runApp()
runApp()
runApp()
runApp()
df_train<-read.csv("zoo_train.csv")
summary(df_train$hair)
strsplit("Max:25")
strsplit("Max:25", ":")
strsplit("Max:25", ":")[[1]][1]
summary(mtcars$mpg)
data.frame(summary(mtcars))
data.frame(summary(mtcars$mpg))
summary(mtcars$mpg)
data.frame(summary(mtcars$mpg))
runApp()
data.frame("a"<-c("Max:25", "Min:20"), "b"<-c("Max:55", "Min:20"))
data.frame(a<-c("Max:25", "Min:20"), b<-c("Max:55", "Min:20"))
?data.frame
data.frame(a=c("Max:25", "Min:20"), b=c("Max:55", "Min:20"))
x<-data.frame(a=c("Max:25", "Min:20"), b=c("Max:55", "Min:20"))
stringr::str_split_fixed(x$a, ":", 2)
runApp()
runApp()
df_train<-iris
runApp()
df_train<-mtcars
runApp()
runApp()
runApp()
runApp()
runApp()
df_train<-iris
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length(unique(mtcars$mpg))
runApp()
data.type(mtcars$mpg)
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
data.type(iris$Species)
class(mtcars$mpg)
X<-FALSE
class(X)
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
sapply(mtcars, data.type)
sapply(iris)
sapply(iris, data.type)
sapply(diamond, data.type)
sapply(diamonds, data.type)
table(diamnds$z)
table(diamonds$z)
table(diamonds$y)
diamonds$clarity
class(diamonds$clarity)
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
diamonds$cut
class(diamonds$cut)
class(diamonds$color)
class(diamonds$color)[1]
class(diamonds$color)=="factor"
"factor" %in% class(col)
"factor" %in% class(diamonds$cut)
class(diamonds$color)=="factor"
any(class(diamonds$color)=="factor")
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
any(class(diamonds$cut))=="factor"
class(diamonds$cut)=="factor"
any(class(diamonds$cut)=="factor")
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
sapply(diamonds, data.type)
unique(diamonds$cut)
data.type(diamonds$cut)
data.type<-function(col){
if ( class(col)=="character" & (length(unique(col))<=10) ){
return("Short Categorical")
}else if ( any(class(col)=="factor") & length(unique(col))<=10 ){
return("Short Categorical")
}else if ( class(col)=="logical" ){
return("Short Categorical")
}else if ( class(col)=="integer" & length(unique(col))<=10 ){
return("Short Categorical")
}else if(class(col)=="numeric"){
return("Continuous")
}else if( (class(col)=="integer") & (length(unique(col))>10) ){
return("Continuous")
}
}
data.type(diamonds$cut)
length(unique(diamonds$cut))<=10
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
data.type(diamonds$cut)
class(diamonds$cut)
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
class(diamonds$cut)
data.type(diamonds$cut)
x<-Sys.Date()
class(x)
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
sapply(mtcars, data.type)
sapple(diamonds, data.type)
sapply(diamonds, data.type)
sapply(iris, data.type)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
sapply(cars, data.type)
sapply(beavers1, data.type)
sapply(beaver1, data.type)
beaver1$day
beaver1$time
beaver1$activ
table(diamonds$cut, diamonds$color)
diamonds
library(datasets)
diamonds
iris
getwd()
x<-read.csv("zoo_train.csv")
data.type(x)
sapply(x, data.type)
table(x$hair, x$milk)
crosstab(x$hair, x$milk)
shiny::runApp()
library(plotly)
runApp()
df_train<-"zoo_train.csv"
df_train<-read.csv("zoo_train.csv")
df_test<-read.csv("zoo_test.csv")
runApp()
outcome.var
outcome.var<-"class_type"
#!/usr/bin/env Rscript
library(shiny)
library(dplyr)
library(DT)
library(stargazer)
library(plotly)
runApp()
source('~/Google Drive/Code/R/EDA/corr.plot.R')
source('~/Google Drive/Code/R/EDA/miss.plot.R')
sapply(data.type, df_train)
sapply(df_train, data.type)
df_train<-read.csv("train.csv")
df_test<-read.csv("test.csv")
sapply(df_train, data.type)
mtcars$cyl
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
df_train
types<-sapply(df_train, data.type)
types
data.frame(type)
data.frame(types)
source('~/Google Drive/Projects/machine-learning-for-all/flask/app/shiny/utils/data.type.R')
types<-sapply(df_train, data.type)
data.frame(types)
type<-sapply(df_train, data.type)
df_type<-data.frame(type)
df_type
df_type$var<-names(df_type)
df_type
df_type$var<-row.names(df_type)
df_type
row.names(df_type)<-NULL
df_type
sapply(iris, data.type)
sapply(beavers, data.type)
sapply(beaver1, data.type)
df_type<-df_type[1:4,]
df_type
target<-c("Continuous", "Categorical")
target.type<-c("Continuous", "Categorical")
x<-df_type$var[df_type$type %in% target.type]
x
target.var<-df_type$var[df_type$type %in% target.type]
taget.var
target.var
target.vars<-df_type$var[df_type$type %in% target.type]
target.vars
outcome.var<-"mpg"
df_train
runApp()
target.vars
?dplyr::select
get(target.vars)
target.vars
runApp()
runApp()
dplyr::select(df_train, target.vars)
dplyr::select(df_train, get(target.vars))
target.vars
df_type
y<-df_train[, target.vars]
y
runApp()
target.vars<-target.vars[-(outcome.var)]
target.vars<-target.vars[,-outcome.var]
target.vars
target.vars<-target.vars[-1]
target.vars
runApp()
runApp()
data.type(mtcars$mpg)=="Continuous"
outcome.var
df_train[,outcome.var]
class(df_train[,outcome.var])
data.type(df_train[,outcome.var])
runApp()
runApp()
runApp()
runApp()
data.type(df_train[,cyl])
df_train
data.type(df_train[,"cyl"])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
df_train<-"zoo_train.csv"
df_train<-"zoo_test.csv"
df_test<-"zoo_test.csv"
df_train<-"zoo_train.csv"
outcome.var<-"class_type"
shiny::runApp()
runApp()
runApp()
runApp()
?break
miss_pct<-purrr::map_dbl(data, function(x){round((sum(is.na(x)) / length(x)) * 100, 1)})
miss_pct<-purrr::map_dbl(df_train, function(x){round((sum(is.na(x)) / length(x)) * 100, 1)})
miss_pct
class(outcome.var)
class_type
class(df_train[,outcome.var])
df_train[,outcome.var]
df_train[outcome.var]
df_train[outcome.var,]
df_train[, get(outcome.var)]
df_train$outcome.var
names(df_trian)
names(df_train)
df_train
df_train<-read.csv("s_train.csv")
getwd()
